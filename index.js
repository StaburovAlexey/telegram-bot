const { match } = require("assert");
const { url } = require("inspector");
const cron = require("node-cron");
const {
  inline_keyboard,
  extendKey,
  appBtn,
  backButton,
  adminBtn,
} = require("./inline_keyboard");

const { bot } = require("./token");
const {
  MongoDBclient,
  db,
  findUserAndAdd,
  findUserHaveKey,
  visionKeyUser,
  searchAndKeyIssuance,
  findArrayOrderId,
} = require("./dataBase/dataBase");
const { arrayNotPaid, sendPay, dataPay } = require("./cryptomus/cryptomus");

const myId = 807148322;
console.log("bot activated");
bot.on("polling_error", console.log);

//–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ª–ø–∞—Ç—ã
cron.schedule("*/5 * * * * *", async () => {
  arrayNotPaid();
});
//–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
cron.schedule("* * */13 * * *", async () => {
  checkSub();
});

const Find = async () => {
  try {
    await MongoDBclient.connect();
    console.log("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");

    const AllDocuments = await db.collection("users").find().toArray();
    console.log(AllDocuments);

    await MongoDBclient.close();
    console.log("–ó–∞–∫—Ä—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ");
  } catch (e) {
    console.log(e);
  }
};
const Update = async (userId) => {
  try {
    await MongoDBclient.connect();
    console.log("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");

    const employees = db.collection("users");
    await employees.findOneAndUpdate(
      { userId: userId },
      {
        $set: {
          timeEnd: `${date.getFullYear()} ${date.getMonth()} ${date.getDate()}`,
        },
      }
    );

    await MongoDBclient.close();
    console.log("–ó–∞–∫—Ä—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ");
  } catch (e) {
    console.log(e);
  }
};
const del = async (userId) => {
  try {
    await MongoDBclient.connect();
    console.log("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é
    const employees = db.collection("users");

    // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    await employees.deleteMany({});

    // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await MongoDBclient.close();
    console.log("–ó–∞–∫—Ä—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ");
  } catch (e) {
    console.log(e);
  }
};
//–æ–ø–ª–∞—Ç–∞
async function pay(userId, message_id, sum) {
  const randomValue = await generateOrderId();
  dataPay.order_id = randomValue;
  dataPay.amount = sum;
  sendPay(dataPay, userId, message_id);
}
// –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ü–∏—Ñ—Ä –∏ –±—É–∫–≤
function generateRandomValue() {
  let randomValue = "";
  const words =
    "0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM";
  var max_position = words.length - 1;
  for (i = 0; i < 20; ++i) {
    position = Math.floor(Math.random() * max_position);
    randomValue = randomValue + words.substring(position, position + 1);
  }
  // –í–µ—Ä–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  return randomValue;
}
//–≥–µ–Ω–µ—Ä–∞—Ü–∏—è order_id –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
async function generateOrderId() {
  const randomValue = generateRandomValue();
  const find = await findArrayOrderId(randomValue);
  if (find === true) {
    generateOrderId();
  } else {
    return randomValue;
  }
}

//–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ–Ω –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
async function checkSub() {
  try {
    const date = new Date();
    const dateWarning = new Date();

    dateWarning.setDate(date.getDate() + 3);

    await MongoDBclient.connect();

    const users = await db.collection("users").find().toArray();

    await MongoDBclient.close();
    users.forEach((user) => {
      if (
        user.timeEnd ==
        `${date.getFullYear()} ${date.getMonth()} ${date.getDate()}`
      ) {
        bot.sendMessage(user.userId, "–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å");
      } else if (
        user.timeEnd ==
        `${dateWarning.getFullYear()} ${dateWarning.getMonth()} ${dateWarning.getDate()}`
      ) {
        bot.sendMessage(user.userId, "–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è");
      }else{
        bot.sendMessage(myId,"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É")
      }
    });
  } catch (e) {
    console.log(e);
  }
}

//–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
bot.on("callback_query", async (query) => {
  const { chat, message_id, text } = query.message;
  const username = query.from.username;
  const userId = query.from.id;
  //–µ—Å—Ç—å –ª–∏ –∫–ª—é—á —É —é–∑–µ—Ä–∞ true/false
  const keyBooleen = await findUserHaveKey(userId);

  switch (query.data) {
    //–∫–Ω–æ–ø–∫–∞ –∫—É–ø–∏—Ç—å –∫–ª—é—á
    case "bay":
      if (keyBooleen === true) {
        bot.editMessageText(
          "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–ª—é—á. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–≥–æ",
          {
            chat_id: chat.id,
            message_id: message_id,
            reply_markup: {
              inline_keyboard: extendKey,
            },
          }
        );
      } else {
        searchAndKeyIssuance(userId);
        bot.editMessageText(
          "–í–∞–º –≤—ã–¥–∞–Ω –∫–ª—é—á —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏—É–¥–æ–º 2 –¥–Ω—è. –ü–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–≥–æ.",
          {
            chat_id: userId,
            message_id: message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: "150—Ä—É–± –º–µ—Å—è—Ü –±–µ–∑–ª–∏–º–∏—Ç", callback_data: `pay150` }],
                [{ text: "50 —Ä—É–± 15–ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data: `pay50` }],
                [
                  {
                    text: "üîë –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á",
                    callback_data: "check",
                  },
                ],
                [
                  {
                    text: "ü§ñ Android",
                    url: "https://play.google.com/store/apps/details?id=com.v2ray.ang&hl=ru&gl=US&pli=1",
                  },
                  {
                    text: "üçé iOS",
                    url: "https://apps.apple.com/us/app/foxray/id6448898396",
                  },
                ],
                [
                  {
                    text: `‚Ü© –ù–∞–∑–∞–¥`,
                    callback_data: "back",
                  },
                ],
              ],
            },
          }
        );
      }

      break;
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
    case "back":
      bot.editMessageText(
        `vpnSAILess –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Å –ª—é–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

  üì± –î–æ—Å—Ç—É–ø –∫ Instagram, Twitter, Facebook –∏ –¥—Ä—É–≥–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º

  üöÄ –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤

  üöß  VPN –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫`,
        {
          chat_id: query.message.chat.id,
          message_id: query.message.message_id,
          reply_markup: { inline_keyboard },
        }
      );
      break;
    //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏ –∫–ª—é—á–µ–π
    case "check":
      if (keyBooleen === true) {
        const key = await visionKeyUser(userId);
        bot
          .sendMessage(userId, `–í–∞—à –∫–ª—é—á ‚Ññ${key[1]}:`)
          .then(bot.sendMessage(userId, `${key[0]}`));
      } else {
        bot.editMessageText("—É –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π", {
          chat_id: chat.id,
          message_id: message_id,
          reply_markup: {
            inline_keyboard,
          },
        });
      }
      break;
    // –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á
    case "extend_key":
      bot.editMessageText("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∏–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", {
        chat_id: chat.id,
        message_id: message_id,
        reply_markup: {
          inline_keyboard: [
            [{ text: "üí≤ 150—Ä—É–± –º–µ—Å—è—Ü –±–µ–∑–ª–∏–º–∏—Ç", callback_data: `pay150` }],
            [{ text: "üí≤ 50 —Ä—É–± 15–ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data: `pay50` }],
            backButton,
          ],
        },
      });
      break;
    // –æ–ø–ª–∞—Ç–∞ 150
    case "pay150":
      pay(userId, message_id, "150");
      break;
    //–æ–ø–ª–∞—Ç–∞ 50
    case "pay50":
      pay(userId, message_id, "50");
      break;
    // //–∫–Ω–æ–ø–∫–∞ —Å –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏
    case "apps":
      bot.editMessageText(`–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`, {
        chat_id: chat.id,
        message_id: message_id,
        reply_markup: {
          inline_keyboard: [appBtn, backButton],
        },
      });

      break;
    //–∫–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"
    case "feedback":
      bot.sendMessage(
        chat.id,
        `–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å /help`
      );
      break;
    //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É
    case "checkpay":
      arrayNotPaid();
      break;
  }

  bot.answerCallbackQuery({
    callback_query_id: query.id,
  });
});
bot.onText(/\/admin/, (msg, [source, match]) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;

  if (userId === myId) {
    bot.sendMessage(
      userId,
      `
–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:

/sendAll - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º
/sendOne userId - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    `,
      {
        reply_markup: {
          inline_keyboard: [...adminBtn],
        },
      }
    );
  }
});

bot.onText(/\/start/, (msg, [source, match]) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = {
    userId: chatId,
    name: msg.from.username,
  };
  findUserAndAdd(user, userId);

  bot.sendMessage(
    chatId,
    `vpnSAILess –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Å –ª—é–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

  üì± –î–æ—Å—Ç—É–ø –∫ Instagram, Twitter, Facebook –∏ –¥—Ä—É–≥–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º

  üöÄ –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤

  üöß  VPN –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫`,
    {
      reply_markup: {
        inline_keyboard,
      },
    }
  );
});

bot.onText(/\/test/, (msg, [source, match]) => {
  const userId = msg.from.id;

  Find();
});

bot.onText(/\/del/, (msg, [source, match]) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  del(userId);
});

bot.onText(/\/help (.+)/, (msg, [source, match]) => {
  const { id } = msg.chat;
  bot
    .sendMessage(
      myId,
      `
      –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:

      ID: ${msg.from.id}
      IDMessege: ${msg.message_id}
      Name: ${msg.from.username}
      text:
      ${match}`
    )
    .then(() => {
      bot.sendMessage(id, "–∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", {
        reply_markup: {
          inline_keyboard,
        },
      });
    });
});

bot.onText(/\/more/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    `–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ VLESS xtls-reality. –ï—Å–ª–∏ –≤–∫—Ä–∞—Ç—Ü–µ, —Ç–æ –º—ã –±—É–¥–µ–º —É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ –≤ HTTPS –∏ –ø—Ä—è—Ç–∞—Ç—å—Å—è –∑–∞ —á—É–∂–∏–º–∏ –¥–æ–º–µ–Ω–∞–º–∏. –¢–æ –µ—Å—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞—à —Ç—Ä–∞—Ñ–∏–∫ —Ç–æ –æ–Ω –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∞–π—Ç–∞ –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –º—ã –ø—Ä–∏–∫—Ä—ã–≤–∞–µ–º—Å—è. –ò –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤—Å—ë —ç—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—á–µ–Ω—å –Ω–µ —Å–∫–æ—Ä–æ.
    ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    "VLESS —è–≤–ª—è–µ—Ç—Å—è –±–æ–ª–µ–µ –Ω–æ–≤—ã–º, –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É "—Å–≤–æ–π/—á—É–∂–æ–π" –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞ "—Å–Ω–∞—Ä—É–∂–∏" —Å–ª–æ–∂–Ω–µ–µ –∏ –∑–∞—â–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ—ç—Ç–æ–º—É, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç VLESS —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏–∑ –≤—Å–µ—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö."

    Google (—Å)`
  );
});
