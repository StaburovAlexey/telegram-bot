const {
  inline_keyboard,
  bay_keyboard,
  extend_keyboard,
  extendKey,
  appBtn,
  backButton,
} = require("./inline_keyboard");
// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
const fs = require("fs");
const TelegramBot = require("node-telegram-bot-api");
const TOKEN = "6347079453:AAHpnwn959SH4yi4Oo4VWk7zpaC_LFCxS1U";
const myId = 807148322;
const btnsPeriod = ["1", "3"];

console.log("bot activated");

const bot = new TelegramBot(TOKEN, {
  polling: true,
});

bot.on("polling_error", console.log);

//—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∫–ª—é—á–µ–π
function creatBtnsKey(userKey) {
  const btns = [];
  userKey.forEach((element) =>
    btns.push([
      {
        text: element.name,
        callback_data: element.name,
      },
    ])
  );
  return btns;
}

//—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
function creatBtnsPeriod(btnsArray) {
  const btns = [];
  btnsArray.forEach((element) =>
    btns.push([
      {
        text: `‚è≥ ${element} –º–µ—Å—è—Ü(–∞)`,
        callback_data: `${element}-ext`,
      },
    ])
  );
  btns.push([backButton]);
  return btns;
}

//—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏
function creatBtnBay(btnsArray) {
  const btns = [];
  btnsArray.forEach((element) =>
    btns.push([
      {
        text: `üõí ${element} –º–µ—Å—è—Ü(–∞)`,
        callback_data: `${element}-bay`,
      },
    ])
  );
  btns.push([backButton]);
  return btns;
}

//–ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ –¥–ª–∏–Ω–Ω—ã
function findArrayLength(array) {
  let length = 0;
  for (let i = 0; i < array.length; i++) {
    length++;
  }
  if (length === undefined) {
    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"; // –µ—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
  }
  return length;
}

//–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞—Å—Å–∏–≤–∞
function findObjectInArray(array, property, value) {
  for (let i = 0; i < array.length; i++) {
    if (array[i][property] === value) {
      return array[i];
    }
  }
  return null;
}
//–¥–æ–±–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª—é—á
function addPropertyToObject(object, property, value) {
  if (object[property] === undefined) {
    object[property] = [value];
  } else {
    object[property].push(value);
  }
}

//—Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
function saveArrayToFile(array, filename) {
  fs.writeFile(filename, JSON.stringify(array, null, 2), (err) => {
    if (err) {
      console.error(err);
    }
  });
}
//–ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
function createArrayFromFile(filename) {
  return JSON.parse(fs.readFileSync(filename));
}

//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
function storeUserData(id, name, chat) {
  // Check if the user's data has already been recorded
  const data = fs.readFileSync("user-data.json");
  const users = JSON.parse(data);
  const user = users.find((user) => user.id === id);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  if (!user) {
    users.push({ id, name, chat, key: [] });
    fs.writeFileSync("user-data.json", JSON.stringify(users, null, 2));
  }
}

//–∏—â–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫–ª—é—á –∏–∑ –±–∞–∑—ã –∫–ª—é—á–µ–π
function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}
// —É–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á –∏–∑ –±–∞–∑—ã
function deleteElement(array, element) {
  const index = array.indexOf(element);
  if (index > -1) {
    array.splice(index, 1);
  }
}
//–æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –∫–ª—é—á–µ–π
function saveFile(array, filename) {
  fs.writeFile(filename, JSON.stringify(array, null, 2), (err) => {
    if (err) {
      console.error(err);
    }
  });
}
//–≤—ã–¥–∞–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function getKeyExpendet(keybase, userId, period) {
  const filename = keybase;
  const arrayUser = createArrayFromFile("user-data.json");
  const object = findObjectInArray(arrayUser, "id", userId);
  //–Ω–∞—Ö–æ–¥–∏–º –º–∞—Å—Å–∏–≤ —Å–≤–æ–π—Å—Ç–≤–∞ 'key'
  const arrayKey = object.key;
  //–ø–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω–Ω—É –º–∞—Å—Å–∏–≤–∞ 'key'
  let length = findArrayLength(arrayKey);
  fs.readFile(filename, "utf8", (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
    const arrayKeys = JSON.parse(data);
    const randomElement = getRandomElement(arrayKeys);

    if (arrayKeys.length === 0) {
      console.log("–ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å");
      bot.sendMessage(userId, "–∫–ª—é—á–∏ –∑–∞–∫–æ—á–∏–ª–∏—Å—å");
    } else if (length >= 1) {
      bot.sendMessage(userId, "–¥–æ—Ö—É—è –∫–ª—é—á–µ–π —É —Ç–µ–±—è, –Ω–µ –¥—É–º–∞–µ—à—å?");
    } else {
      addPropertyToObject(object, "key", randomElement);
      saveArrayToFile(arrayUser, "user-data.json");
      bot.sendMessage(
        userId,
        `–í–∞—à –∫–ª—é—á –Ω–∞ ${period} –º–µ—Å—è—Ü(–∞): 
${randomElement.key}`
      );
      deleteElement(arrayKeys, randomElement);
      saveFile(arrayKeys, filename);
    }
  });
}

//–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
bot.on("callback_query", (query) => {
  const { chat, message_id, text } = query.message;
  const username = query.from.username;
  const userId = query.from.id;
  //–º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const arrayUsers = createArrayFromFile("user-data.json");
  //–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
  const user = arrayUsers.find((user) => user.id === userId);
  const userKey = user.key[0];

  //–ø—Ä–∏–≤—è–∑–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º
  btnsPeriod.forEach((btn) => {
    if (query.data === `${btn}-ext` && btn === "1") {
      bot.sendMessage(
        userId,
        `–∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –Ω–∞ 1 –º–µ—Å—è—Ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞

–í–∞—à –∫–ª—é—á:
'${userKey.key}'`
      );
      bot.sendMessage(
        myId,
        `–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 1 –º–µ—Å—è—Ü:
       
      UserName: ${username}
      UserId:   ${userId}
      key:  ${userKey.name}
      `
      );
    } else if (query.data === `${btn}-ext` && btn === "3") {
      bot.sendMessage(
        userId,
        `–∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        
–í–∞—à –∫–ª—é—á:        
'${userKey.key}'`
      );
      bot.sendMessage(
        myId,
        `–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 3 –º–µ—Å—è—Üa:
       
      UserName: ${username}
      UserId:   ${userId}
      key:  ${userKey.name}
      `
      );
    } else if (query.data === `${btn}-bay`) {
      getKeyExpendet("dataKeys1m.json", userId, btn);
    }
  });

  if (query.data === "back") {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω

    bot.editMessageText("–í—ã–±—ã–∏—Ä–∞–π—Ç–µ", {
      chat_id: query.message.chat.id,
      message_id: query.message.message_id,
      reply_markup: { inline_keyboard },
    });
  }

  switch (query.data) {
    //–∫–Ω–æ–ø–∫–∞ –∫—É–ø–∏—Ç—å –∫–ª—é—á
    case "bay":
      if (userKey === undefined) {
        bot.editMessageText("–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏", {
          chat_id: chat.id,
          message_id: message_id,
          reply_markup: { inline_keyboard: [...creatBtnBay(btnsPeriod)] },
        });
      } else {
        bot.editMessageText(
          "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–ª—é—á. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–≥–æ",
          {
            chat_id: chat.id,
            message_id: message_id,
            reply_markup: {
              inline_keyboard: [...extendKey],
            },
          }
        );
      }

      break;

    //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏ –∫–ª—é—á–µ–π
    case "check":
      if (userKey === undefined) {
        bot.editMessageText("—É –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π", {
          chat_id: chat.id,
          message_id: message_id,
          reply_markup: {
            inline_keyboard,
          },
        });
      } else {
        bot.sendMessage(
          userId,
          `–í–∞—à –∫–ª—é—á:
${userKey.key}`
        );
      }

      break;
    //–∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á
    case "extend_key":
      bot.editMessageText("–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", {
        chat_id: chat.id,
        message_id: message_id,
        reply_markup: { inline_keyboard: [...creatBtnsPeriod(btnsPeriod)] },
      });

      break;

    //–∫–Ω–æ–ø–∫–∞ —Å –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏
    case "apps":
      bot.editMessageText(`–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`, {
        chat_id: chat.id,
        message_id: message_id,
        reply_markup: {
          inline_keyboard: [...appBtn],
        },
      });

      break;

    //–∫–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"
    case "feedback":
      bot.sendMessage(
        chat.id,
        `–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å /help`
      );
      break;
  }

  bot.answerCallbackQuery({
    callback_query_id: query.id,
  });
});

bot.onText(/\/start/, (msg, [source, match]) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;

  storeUserData(userId, username, chatId);

  bot.sendMessage(chatId, "–≤—ã–±–∏—Ä–∞–π—Ç–µ", {
    reply_markup: {
      inline_keyboard,
    },
  });
});

bot.onText(/\/help (.+)/, (msg, [source, match]) => {
  const { id } = msg.chat;
  bot
    .sendMessage(
      myId,
      `
      –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:

      ID: ${msg.from.id}
      IDMessege: ${msg.message_id}
      Name: ${msg.from.username}
      text:
      ${msg.text}`
    )
    .then(() => {
      bot.sendMessage(id, "–∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", {
        reply_markup: {
          inline_keyboard,
        },
      });
    });
});

bot.onText(/\/more/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    `–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ VLESS xtls-reality. –ï—Å–ª–∏ –≤–∫—Ä–∞—Ç—Ü–µ, —Ç–æ –º—ã –±—É–¥–µ–º —É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ –≤ HTTPS –∏ –ø—Ä—è—Ç–∞—Ç—å—Å—è –∑–∞ —á—É–∂–∏–º–∏ –¥–æ–º–µ–Ω–∞–º–∏. –¢–æ –µ—Å—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞—à —Ç—Ä–∞—Ñ–∏–∫ —Ç–æ –æ–Ω –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∞–π—Ç–∞ –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –º—ã –ø—Ä–∏–∫—Ä—ã–≤–∞–µ–º—Å—è. –ò –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤—Å—ë —ç—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—á–µ–Ω—å –Ω–µ —Å–∫–æ—Ä–æ.
    ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    "VLESS —è–≤–ª—è–µ—Ç—Å—è –±–æ–ª–µ–µ –Ω–æ–≤—ã–º, –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É "—Å–≤–æ–π/—á—É–∂–æ–π" –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞ "—Å–Ω–∞—Ä—É–∂–∏" —Å–ª–æ–∂–Ω–µ–µ –∏ –∑–∞—â–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ—ç—Ç–æ–º—É, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç VLESS —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏–∑ –≤—Å–µ—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö."

    Google (—Å)`
  );
});
